// proto service for url shortner

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: url_shortner_service.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UrlShortner_ShortenUrl_FullMethodName = "/proto.UrlShortner/ShortenUrl"
	UrlShortner_GetUrl_FullMethodName     = "/proto.UrlShortner/GetUrl"
)

// UrlShortnerClient is the client API for UrlShortner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UrlShortnerClient interface {
	ShortenUrl(ctx context.Context, in *ShortenUrlRequest, opts ...grpc.CallOption) (*ShortenUrlResponse, error)
	GetUrl(ctx context.Context, in *GetUrlRequest, opts ...grpc.CallOption) (*GetUrlResponse, error)
}

type urlShortnerClient struct {
	cc grpc.ClientConnInterface
}

func NewUrlShortnerClient(cc grpc.ClientConnInterface) UrlShortnerClient {
	return &urlShortnerClient{cc}
}

func (c *urlShortnerClient) ShortenUrl(ctx context.Context, in *ShortenUrlRequest, opts ...grpc.CallOption) (*ShortenUrlResponse, error) {
	out := new(ShortenUrlResponse)
	err := c.cc.Invoke(ctx, UrlShortner_ShortenUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlShortnerClient) GetUrl(ctx context.Context, in *GetUrlRequest, opts ...grpc.CallOption) (*GetUrlResponse, error) {
	out := new(GetUrlResponse)
	err := c.cc.Invoke(ctx, UrlShortner_GetUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UrlShortnerServer is the server API for UrlShortner service.
// All implementations must embed UnimplementedUrlShortnerServer
// for forward compatibility
type UrlShortnerServer interface {
	ShortenUrl(context.Context, *ShortenUrlRequest) (*ShortenUrlResponse, error)
	GetUrl(context.Context, *GetUrlRequest) (*GetUrlResponse, error)
	mustEmbedUnimplementedUrlShortnerServer()
}

// UnimplementedUrlShortnerServer must be embedded to have forward compatible implementations.
type UnimplementedUrlShortnerServer struct {
}

func (UnimplementedUrlShortnerServer) ShortenUrl(context.Context, *ShortenUrlRequest) (*ShortenUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortenUrl not implemented")
}
func (UnimplementedUrlShortnerServer) GetUrl(context.Context, *GetUrlRequest) (*GetUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUrl not implemented")
}
func (UnimplementedUrlShortnerServer) mustEmbedUnimplementedUrlShortnerServer() {}

// UnsafeUrlShortnerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UrlShortnerServer will
// result in compilation errors.
type UnsafeUrlShortnerServer interface {
	mustEmbedUnimplementedUrlShortnerServer()
}

func RegisterUrlShortnerServer(s grpc.ServiceRegistrar, srv UrlShortnerServer) {
	s.RegisterService(&UrlShortner_ServiceDesc, srv)
}

func _UrlShortner_ShortenUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShortnerServer).ShortenUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UrlShortner_ShortenUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShortnerServer).ShortenUrl(ctx, req.(*ShortenUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlShortner_GetUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShortnerServer).GetUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UrlShortner_GetUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShortnerServer).GetUrl(ctx, req.(*GetUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UrlShortner_ServiceDesc is the grpc.ServiceDesc for UrlShortner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UrlShortner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UrlShortner",
	HandlerType: (*UrlShortnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShortenUrl",
			Handler:    _UrlShortner_ShortenUrl_Handler,
		},
		{
			MethodName: "GetUrl",
			Handler:    _UrlShortner_GetUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "url_shortner_service.proto",
}
